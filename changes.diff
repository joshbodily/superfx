diff --git a/models/starfox.ply b/models/starfox.ply
index fe500bc..0930e09 100644
--- a/models/starfox.ply
+++ b/models/starfox.ply
@@ -1,7 +1,7 @@
 ply
 format ascii 1.0
 comment Created by Blender 2.78 (sub 0) - www.blender.org, source file: ''
-element vertex 62
+element vertex 42
 property float x
 property float y
 property float z
@@ -16,87 +16,67 @@ property uchar blue
 element face 22
 property list uchar uint vertex_indices
 end_header
-0.001113 -0.372016 0.122996 -0.015351 -0.986785 0.161138 0.687128 0.734903 255 165 33
--0.215379 -0.254635 -0.018131 0.605457 -0.772423 -0.191687 0.647056 0.713176 255 165 33
-0.219197 -0.253044 -0.018172 -0.589343 -0.779199 -0.213324 0.727495 0.712881 255 165 33
--0.215379 -0.254635 -0.018131 0.605457 -0.772423 -0.191687 0.803370 0.558166 54 0 255
--0.130827 0.229209 -0.030620 0.432905 0.901303 -0.014649 0.819020 0.647724 63 11 255
--0.605928 -0.656825 0.226597 -0.455702 -0.780419 0.428053 0.731080 0.483722 56 3 255
--0.130827 0.229209 -0.030620 0.432905 0.901303 -0.014649 0.767232 0.889060 54 0 255
--0.457512 -0.173292 -0.151435 -0.744896 0.615284 -0.257912 0.789595 0.949528 55 2 255
--0.605928 -0.656825 0.226597 -0.455702 -0.780419 0.428053 0.719622 0.977000 54 0 255
--0.130827 0.229209 -0.030620 0.432905 0.901303 -0.014649 0.581876 0.736858 54 0 255
--0.215379 -0.254635 -0.018131 0.605457 -0.772423 -0.191687 0.566226 0.826416 54 0 255
--0.457512 -0.173292 -0.151435 -0.744896 0.615284 -0.257912 0.521408 0.811360 54 0 255
--0.457512 -0.173292 -0.151435 -0.744896 0.615284 -0.257912 0.533119 0.828372 54 0 255
--0.215379 -0.254635 -0.018131 0.605457 -0.772423 -0.191687 0.577937 0.843428 54 0 255
--0.605928 -0.656825 0.226597 -0.455702 -0.780419 0.428053 0.505647 0.917873 54 0 255
--0.457512 -0.173292 -0.151435 -0.744896 0.615284 -0.257912 0.866665 0.826555 255 255 255
--0.215379 -0.254635 -0.018131 0.605457 -0.772423 -0.191687 0.911483 0.801881 255 255 255
--0.301224 -0.205711 -0.276743 0.468551 0.469222 -0.748497 0.895593 0.849749 255 255 255
-0.219197 -0.253044 -0.018172 -0.589343 -0.779199 -0.213324 0.825057 0.558461 54 0 255
-0.605928 -0.656825 0.226597 0.452925 -0.781884 0.428297 0.870363 0.483722 54 0 255
-0.134193 0.229209 -0.030673 -0.430952 0.902249 -0.014588 0.822743 0.647724 54 0 255
-0.134193 0.229209 -0.030673 -0.430952 0.902249 -0.014588 0.840763 0.976377 54 0 255
-0.605928 -0.656825 0.226597 0.452925 -0.781884 0.428297 0.793144 0.889060 54 0 255
-0.457512 -0.173292 -0.151435 0.744011 0.615558 -0.259804 0.863116 0.916531 54 0 255
-0.457512 -0.173292 -0.151435 0.744011 0.615558 -0.259804 0.716450 0.963562 54 0 255
-0.219197 -0.253044 -0.018172 -0.589343 -0.779199 -0.213324 0.672338 0.978323 54 0 255
-0.134193 0.229209 -0.030673 -0.430952 0.902249 -0.014588 0.656604 0.889060 54 0 255
-0.457512 -0.173292 -0.151435 0.744011 0.615558 -0.259804 0.625285 0.883059 58 5 255
-0.605928 -0.656825 0.226597 0.452925 -0.781884 0.428297 0.652756 0.972560 54 0 255
-0.219197 -0.253044 -0.018172 -0.589343 -0.779199 -0.213324 0.581174 0.897821 54 0 255
-0.301224 -0.205711 -0.276743 -0.473617 0.465957 -0.747337 0.930543 0.835986 255 255 255
-0.219197 -0.253044 -0.018172 -0.589343 -0.779199 -0.213324 0.915361 0.788125 255 255 255
-0.457512 -0.173292 -0.151435 0.744011 0.615558 -0.259804 0.959472 0.812791 255 255 255
--0.301224 -0.205711 -0.276743 0.468551 0.469222 -0.748497 0.959683 0.489722 255 255 255
--0.762492 -0.985007 -0.313925 -0.481185 -0.857845 -0.180303 0.874303 0.633968 255 255 255
--0.457512 -0.173292 -0.151435 -0.744896 0.615284 -0.257912 0.930754 0.483722 255 255 255
--0.301224 -0.205711 -0.276743 0.468551 0.469222 -0.748497 0.649513 0.736858 176 164 168
--0.215379 -0.254635 -0.018131 0.605457 -0.772423 -0.191687 0.697382 0.745914 176 164 168
--0.762492 -0.985007 -0.313925 -0.481185 -0.857845 -0.180303 0.642631 0.881104 176 164 168
--0.762492 -0.985007 -0.313925 -0.481185 -0.857845 -0.180303 0.892341 0.635923 179 167 171
--0.215379 -0.254635 -0.018131 0.605457 -0.772423 -0.191687 0.993610 0.771113 176 165 169
--0.457512 -0.173292 -0.151435 -0.744896 0.615284 -0.257912 0.948792 0.786169 176 164 168
-0.001113 -0.372016 0.122996 -0.015351 -0.986785 0.161138 0.474469 0.009653 255 255 255
-0.219197 -0.253044 -0.018172 -0.589343 -0.779199 -0.213324 0.548450 0.122690 255 255 255
-0.012398 -0.213513 0.313925 0.025086 -0.204840 0.978454 0.307351 0.080678 255 255 255
-0.012398 -0.213513 0.313925 0.025086 -0.204840 0.978454 0.252763 0.082693 255 255 255
--0.215379 -0.254635 -0.018131 0.605457 -0.772423 -0.191687 0.012270 0.122925 255 255 255
-0.001113 -0.372016 0.122996 -0.015351 -0.986785 0.161138 0.086477 0.011623 255 255 255
-0.001113 0.985007 -0.050108 -0.003479 0.993255 -0.115757 0.247367 0.995500 255 255 255
-0.001113 0.985007 -0.050108 -0.003479 0.993255 -0.115757 0.310909 0.997262 255 255 255
-0.219197 -0.253044 -0.018172 -0.589343 -0.779199 -0.213324 0.727495 0.712881 255 255 255
--0.215379 -0.254635 -0.018131 0.605457 -0.772423 -0.191687 0.647056 0.713176 255 255 255
-0.001113 0.985007 -0.050108 -0.003479 0.993255 -0.115757 0.687128 0.483722 255 255 255
-0.301224 -0.205711 -0.276743 -0.473617 0.465957 -0.747337 0.803956 0.655680 255 255 255
-0.457512 -0.173292 -0.151435 0.744011 0.615558 -0.259804 0.832884 0.649680 255 255 255
-0.762492 -0.985007 -0.313925 0.479934 -0.858547 -0.180364 0.889335 0.799926 255 255 255
-0.301224 -0.205711 -0.276743 -0.473617 0.465957 -0.747337 0.591765 0.881104 176 164 168
-0.762492 -0.985007 -0.313925 0.479934 -0.858547 -0.180364 0.584882 0.736858 176 164 168
-0.219197 -0.253044 -0.018172 -0.589343 -0.779199 -0.213324 0.639625 0.872342 176 164 168
-0.762492 -0.985007 -0.313925 0.479934 -0.858547 -0.180364 0.800950 0.736858 176 164 168
-0.457512 -0.173292 -0.151435 0.744011 0.615558 -0.259804 0.744499 0.887104 176 164 168
-0.219197 -0.253044 -0.018172 -0.589343 -0.779199 -0.213324 0.700387 0.872342 181 170 174
+0.001113 0.122996 0.372016 -0.015351 0.161138 0.986785 0.687128 0.734903 255 217 123
+-0.215379 -0.018131 0.254635 0.605457 -0.191687 0.772423 0.647056 0.713176 255 217 123
+0.219197 -0.018172 0.253044 -0.589343 -0.213324 0.779199 0.727495 0.712881 255 217 123
+-0.215379 -0.018131 0.254635 0.605457 -0.191687 0.772423 0.126629 0.440319 0 40 255
+-0.130827 -0.030620 -0.229209 0.432905 -0.014649 -0.901303 0.085241 0.000134 0 40 255
+-0.605928 0.226597 0.656825 -0.455702 0.428053 0.780419 0.000134 0.995982 0 40 255
+-0.130827 -0.030620 -0.229209 0.432905 -0.014649 -0.901303 0.085241 0.000134 24 41 148
+-0.457512 -0.151435 0.173292 -0.744896 -0.257912 -0.615284 0.019143 0.440319 24 41 148
+-0.605928 0.226597 0.656825 -0.455702 0.428053 0.780419 0.000134 0.995982 24 41 148
+-0.457512 -0.151435 0.173292 -0.744896 -0.257912 -0.615284 0.019143 0.440319 0 40 255
+-0.457512 -0.151435 0.173292 -0.744896 -0.257912 -0.615284 0.338576 0.000134 211 211 214
+-0.215379 -0.018131 0.254635 0.605457 -0.191687 0.772423 0.338576 0.516271 211 211 214
+-0.301224 -0.276743 0.205711 0.468551 -0.748497 -0.469222 0.249921 0.300609 211 211 214
+0.219197 -0.018172 0.253044 -0.589343 -0.213324 0.779199 0.126897 0.441143 0 40 255
+0.605928 0.226596 0.656825 0.452956 0.428297 0.781884 0.249653 0.999866 0 40 255
+0.134193 -0.030673 -0.229209 -0.430952 -0.014588 -0.902249 0.171264 0.000134 0 40 255
+0.134193 -0.030673 -0.229209 -0.430952 -0.014588 -0.902249 0.171264 0.000134 1 41 255
+0.457512 -0.151435 0.173292 0.744011 -0.259804 -0.615558 0.232835 0.441143 0 40 255
+0.301224 -0.276743 0.205711 -0.473617 -0.747337 -0.465957 0.643169 0.296711 211 211 214
+0.219197 -0.018172 0.253044 -0.589343 -0.213324 0.779199 0.554267 0.509822 211 211 214
+0.457512 -0.151435 0.173292 0.744011 -0.259804 -0.615558 0.554267 0.000134 211 211 214
+-0.762492 -0.313926 0.985007 -0.481185 -0.180303 0.857845 0.445862 0.250427 211 211 214
+-0.301224 -0.276743 0.205711 0.468551 -0.748497 -0.469222 0.249921 0.300609 255 255 255
+-0.215379 -0.018131 0.254635 0.605457 -0.191687 0.772423 0.338576 0.516271 255 255 255
+-0.762492 -0.313926 0.985007 -0.481185 -0.180303 0.857845 0.445862 0.250427 255 255 255
+-0.457512 -0.151435 0.173292 -0.744896 -0.257912 -0.615284 0.338576 0.000134 255 255 255
+0.001113 0.122996 0.372016 -0.015351 0.161138 0.986785 0.474469 0.009653 255 255 255
+0.219197 -0.018172 0.253044 -0.589343 -0.213324 0.779199 0.548450 0.122690 255 255 255
+0.012398 0.313925 0.213513 0.025086 0.978454 0.204840 0.307351 0.080678 255 255 255
+0.012398 0.313925 0.213513 0.025086 0.978454 0.204840 0.252763 0.082693 255 255 255
+-0.215379 -0.018131 0.254635 0.605457 -0.191687 0.772423 0.012270 0.122925 255 255 255
+0.001113 0.122996 0.372016 -0.015351 0.161138 0.986785 0.086477 0.011623 255 255 255
+0.001113 -0.050107 -0.985007 -0.003479 -0.115757 -0.993255 0.247367 0.995500 255 255 255
+0.001113 -0.050107 -0.985007 -0.003479 -0.115757 -0.993255 0.310909 0.997262 255 255 255
+0.219197 -0.018172 0.253044 -0.589343 -0.213324 0.779199 0.727495 0.712881 211 211 214
+-0.215379 -0.018131 0.254635 0.605457 -0.191687 0.772423 0.647056 0.713176 211 211 214
+0.001113 -0.050107 -0.985007 -0.003479 -0.115757 -0.993255 0.687128 0.483722 211 211 214
+0.762492 -0.313926 0.985007 0.479934 -0.180364 0.858547 0.446130 0.246325 211 211 214
+0.301224 -0.276743 0.205711 -0.473617 -0.747337 -0.465957 0.643169 0.296711 255 255 255
+0.762492 -0.313926 0.985007 0.479934 -0.180364 0.858547 0.446130 0.246325 255 255 255
+0.219197 -0.018172 0.253044 -0.589343 -0.213324 0.779199 0.554267 0.509822 255 255 255
+0.457512 -0.151435 0.173292 0.744011 -0.259804 -0.615558 0.554267 0.000134 255 255 255
 3 0 1 2
 3 3 4 5
 3 6 7 8
-3 9 10 11
-3 12 13 14
-3 15 16 17
+3 4 3 9
+3 9 3 5
+3 10 11 12
+3 13 14 15
+3 16 14 17
+3 17 13 15
+3 17 14 13
 3 18 19 20
-3 21 22 23
-3 24 25 26
-3 27 28 29
-3 30 31 32
-3 33 34 35
-3 36 37 38
-3 39 40 41
-3 42 43 44
-3 45 46 47
-3 48 46 45
-3 43 49 44
-3 50 51 52
-3 53 54 55
-3 56 57 58
-3 59 60 61
+3 12 21 10
+3 22 23 24
+3 24 23 25
+3 26 27 28
+3 29 30 31
+3 32 30 29
+3 27 33 28
+3 34 35 36
+3 18 20 37
+3 38 39 40
+3 39 41 40
diff --git a/parse.c b/parse.c
index 43d943b..ebac83f 100644
--- a/parse.c
+++ b/parse.c
@@ -17,6 +17,10 @@ typedef struct {
   char name[128];
   int width;
   int height;
+  float x, y, z;
+  float pitch;
+  float roll;
+  float yaw;
 } ModelDef; 
 
 typedef struct {
@@ -50,6 +54,7 @@ TextureDef* parse(int* out) {
         strcpy(texture->name, dir->d_name);
         char path[128];
         sprintf(path, "textures/%s", texture->name);
+        printf("textures/%s\n", texture->name);
         texture->id = png_texture_load(path, &texture->width, &texture->height); 
       }
     }
@@ -93,6 +98,7 @@ ModelDef* parse_models(int* out) {
       if (strstr(dir->d_name, ".ply") != NULL) {
         ModelDef* model = &(models[i++]);
         strcpy(model->name, dir->d_name);
+        model->x = model->y = model->z = model->pitch = model->roll = 0.0f;
         char path[128];
         sprintf(path, "models/%s", model->name);
         parse_model(path, model);
@@ -115,6 +121,7 @@ void parse_model(const char* path, ModelDef* model) {
   int faces = 0;
 
   fp = fopen(path, "r");
+  printf("Parsing %s\n", path);
 
   // Parse header
   int parse = 0;
@@ -129,7 +136,6 @@ void parse_model(const char* path, ModelDef* model) {
     }
   }
 
-
   // Parse vertices
   model->vertices = (GLfloat*)malloc(sizeof(GLfloat) * vertices * 11);
   model->num_vertices = vertices * 11;
diff --git a/shaders/shader.frag b/shaders/shader.frag
index e77dbf2..4d16e44 100644
--- a/shaders/shader.frag
+++ b/shaders/shader.frag
@@ -1,5 +1,6 @@
 //uniform sampler2D texture;
 
+uniform sampler2D texture;
 varying vec3 normal;
 varying vec4 color;
 
@@ -12,4 +13,5 @@ void main() {
   } else {
     gl_FragColor = color * max(dot(vec3(0.707, 0.707, 0), normal), 0.5);
   }
+  gl_FragColor = texture2D(texture, gl_TexCoord[0].st);
 }
diff --git a/superfx.c b/superfx.c
index 8699fe6..2805202 100644
--- a/superfx.c
+++ b/superfx.c
@@ -7,10 +7,11 @@
 #include <gl-matrix.h>
 #include <assert.h>
 #include "stdio.h"
+#include "entity.h"
 
 // TODO: Fix
 #include "parse.c"
-
+#define JOYSTICK_DEAD_ZONE 8000
 #define PI_2 3.141592 * 0.5
 
 GLuint png_texture_load(const char * file_name, int * width, int * height);
@@ -23,10 +24,7 @@ GLuint program;
 // Render full-screen quad
 GLuint program2;
 
-// Arwing state
-float roll = 0.0f;
-float pitch = 0.0f;
-float z = 0.0f;
+ModelDef* models;
 
 char* getFileData(const char* path) {
 	FILE* f = fopen(path, "rb");
@@ -108,6 +106,7 @@ int compileShaders(const char* vert, const char* frag, GLuint* program) {
 
 void renderQuad(GLuint texture, int x, int y, int w, int h) {
   glUseProgram(program2);
+
   // bind texture
   GLuint texLoc = glGetUniformLocation(program2, "texture");
   assert(texLoc != -1);
@@ -130,6 +129,41 @@ void renderQuad(GLuint texture, int x, int y, int w, int h) {
   glEnd();
 }
 
+void processJoystickInput(SDL_Event* event) {
+  static short yaw = 1;
+  static short pitch = 0;
+  if (event) {
+    if (event->type == SDL_JOYAXISMOTION) {
+      if (event->jaxis.which == 0) {
+        if (event->jaxis.axis == 0) {
+          if (fabs(event->jaxis.value) > JOYSTICK_DEAD_ZONE) {
+            //printf("X: %d\n", event->jaxis.value);
+            if (event->jaxis.value > 0.0f)
+              yaw = -1;
+            else
+              yaw = 1;
+          } else {
+            yaw = 0;
+          }
+        } else if (event->jaxis.axis == 1) {
+          if (fabs(event->jaxis.value) > JOYSTICK_DEAD_ZONE) {
+            //printf("X: %d\n", event->jaxis.value);
+            if (event->jaxis.value > 0.0f)
+              pitch = 1;
+            else
+              pitch = -1;
+          } else {
+            pitch = 0;
+          }
+        }
+      }
+    }
+  } else {
+    models[0].yaw += yaw * PI_2 * 0.02;
+    models[0].pitch += pitch * PI_2 * 0.02;
+  }
+}
+
 void processKeyboardInput(SDL_Event* event) {
   static short left, right, up, down = 0;
   if (event) {
@@ -146,14 +180,14 @@ void processKeyboardInput(SDL_Event* event) {
       if (event->key.keysym.sym == SDLK_DOWN) { down = 0; } 
     }
   } else {
-    if (left) { roll -= PI_2 * 0.02; }
-    if (right) { roll += PI_2 * 0.02; }
-    if (up) { pitch -= PI_2 * 0.02; }
-    if (down) { pitch += PI_2 * 0.02; }
+    if (left) { models[0].yaw += PI_2 * 0.02; }
+    if (right) { models[0].yaw -= PI_2 * 0.02; }
+    if (up) { models[0].pitch -= PI_2 * 0.02; }
+    if (down) { models[0].pitch += PI_2 * 0.02; }
   }
 }
 
-void renderModel(ModelDef* draw) {
+void renderModel(ModelDef* draw, vec3_t* out, GLuint mode, GLuint texture) {
   // Pass data to shaders
   glUseProgram(program);
 
@@ -174,13 +208,15 @@ void renderModel(ModelDef* draw) {
 
   // rotate model
   mat4_identity(temp);
-  z -= 0.0166f;
-  float translate_model[3] = {0.0f, 0.0f, z};
-  mat4_translate(temp, translate_model, temp);
-  mat4_rotateX(temp, -PI_2, NULL);
-  mat4_rotateY(temp, roll * 0.33, temp);
-  mat4_rotateZ(temp, -roll , temp); // yaw, should be opposite
-  mat4_rotateX(temp, pitch, model);
+  mat4_rotateY(temp, draw->yaw, temp);
+  mat4_rotateX(temp, draw->pitch, temp);
+
+  // mat4_t mat4_multiplyVec3(mat4_t mat, vec3_t vec, mat4_t dest);
+  if (out != NULL)
+    mat4_multiplyVec3(temp, *out, NULL);
+
+  float translate_model[3] = {draw->x, draw->y, draw->z};
+  mat4_translate(temp, translate_model, model);
 
   GLuint projectionID = glGetUniformLocation(program, "perspective");
   GLuint modelID = glGetUniformLocation(program, "model");
@@ -189,6 +225,15 @@ void renderModel(ModelDef* draw) {
   assert(modelID != -1);
   assert(viewID != -1);
 
+  // bind texture
+  GLuint texLoc = glGetUniformLocation(program, "texture");
+  assert(texLoc != -1);
+  glUniform1i(texLoc, 0);
+  glActiveTexture(GL_TEXTURE0);
+  glBindTexture(GL_TEXTURE_2D, texture);
+  glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
+  glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
+
   glUniformMatrix4fv(projectionID, 1, GL_FALSE, perspective);
   glUniformMatrix4fv(modelID, 1, GL_FALSE, model);
   glUniformMatrix4fv(viewID, 1, GL_FALSE, view);
@@ -206,23 +251,36 @@ void renderModel(ModelDef* draw) {
   glTexCoordPointer(2, GL_FLOAT, stride, 6 * sizeof(float));
   glColorPointer(3, GL_FLOAT, stride, 8 * sizeof(float));
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, draw->indicesID);
-  glDrawElements(GL_TRIANGLES, draw->num_indices, GL_UNSIGNED_INT, NULL);
+  glDrawElements(mode, draw->num_indices, GL_UNSIGNED_INT, NULL);
 
   glDisableClientState(GL_COLOR_ARRAY);
   glDisableClientState(GL_VERTEX_ARRAY);
   glDisableClientState(GL_TEXTURE_COORD_ARRAY);
   glDisableClientState(GL_NORMAL_ARRAY);
-
-  //GLubyte data[256 * 256 * 3]; 
-  //glReadPixels(0, 0, 256, 256, GL_RGB, GL_UNSIGNED_BYTE, &data);
-  //save_png_to_file (&data, "/Users/josh0/superfx/out.png");
 }
 
 int main() {
-  if (SDL_Init(SDL_INIT_VIDEO) < 0) {
+  // Setup Gamepad
+  SDL_Joystick* gGameController = NULL;
+
+  if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_JOYSTICK) < 0) {
+    fprintf(stderr, "Could not initialize video or joystick%s\n", SDL_GetError());
     return 1;
   }
 
+  // Check for joysticks
+  if(SDL_NumJoysticks() < 1) {
+    fprintf(stderr, "Warning: No joysticks connected!\n");
+    //return 1;
+  } else {
+    // Load joystick
+    gGameController = SDL_JoystickOpen(0);
+    if (gGameController == NULL) {
+      fprintf(stderr, "Warning: Unable to open game controller! SDL Error: %s\n", SDL_GetError());
+    }
+  }
+
+
 	SDL_GL_SetAttribute( SDL_GL_CONTEXT_MAJOR_VERSION, 2 );
 	SDL_GL_SetAttribute( SDL_GL_CONTEXT_MINOR_VERSION, 1 );
   SDL_Window* window = SDL_CreateWindow("SDL Tutorial", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 512, 512, SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN);
@@ -236,7 +294,6 @@ int main() {
   }
 
   // load any textures
-  
   int count = 0;
   TextureDef* textures = parse(&count);  
   assert(count > 0);
@@ -245,7 +302,12 @@ int main() {
   }
 
   // load all models
-  ModelDef* models = parse_models(&count);
+  models = parse_models(&count);
+  models[1].z = -10.0f;
+  models[1].x = -2.0f;
+
+  models[2].z = -20.0f;
+  models[2].x = 3.0f;
 
 	compileShaders("shaders/shader.vert", "shaders/shader.frag", &program);
 	compileShaders("shaders/shader2.vert", "shaders/shader2.frag", &program2);
@@ -288,23 +350,25 @@ int main() {
 		return 4;
   }
 		
-  mat4_t identity;
-  // model
-  identity = mat4_create(NULL);
-
   // Main Loop
   short run = 1;
   SDL_Event event;
   float rot = 0.0;
 
+  glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+  glEnable(GL_BLEND);
+
   while (run) {
     while (SDL_PollEvent(&event)) {
       if (event.type == SDL_QUIT) {
         run = 0;
       }
       processKeyboardInput(&event);
+      //processJoystickInput(&event);
     }
+
     processKeyboardInput(NULL);
+    //processJoystickInput(NULL);
 
 		glEnable(GL_DEPTH_TEST);
 		glEnable(GL_CULL_FACE);
@@ -315,10 +379,23 @@ int main() {
 		glClearColor(156.0/255.0, 219.0/255.0, 111.0/255.0, 1);
 
 		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
-    //renderQuad(textures[0].id, 0, 0, 256 * 2, 256 * 2);
 
+    // 1. Background
+    renderQuad(textures[1].id, 0, 0, 256 * 2, 256 * 2);
+    
 		glClear(GL_DEPTH_BUFFER_BIT);
-    renderModel(&(models[0]));
+
+    // 2. Models
+    // get the velocity vector of the ARwing
+    vec3_t velocity_vector; velocity_vector[0] = 0.0f; velocity_vector[1] = 0.0f; velocity_vector[2] = 1.0f;
+    GLuint texture = textures[0].id;
+    renderModel(&models[0], &velocity_vector, GL_TRIANGLES, texture);
+    renderModel(&models[1], NULL, GL_TRIANGLES, texture);
+    renderModel(&models[2], NULL, GL_TRIANGLES, texture);
+    renderModel(&models[3], NULL, GL_TRIANGLES, texture);
+    renderModel(&models[4], NULL, GL_TRIANGLES, texture);
+
+    // 3. UI
     renderQuad(textures[0].id, 8, 8, 64 * 2, 64 * 2);
 
     // Render scaled full-screen quad
@@ -328,7 +405,22 @@ int main() {
     glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
     renderQuad(textureId, 0, 0, 512, 512);
 
-
     SDL_GL_SwapWindow(window);
+
+    // Move box
+    models[1].x += velocity_vector[0] * 0.01667 * 3;
+    models[1].y += velocity_vector[1] * 0.01667 * 3;
+    models[1].z += velocity_vector[2] * 0.01667 * 3;
+
+    models[2].x += velocity_vector[0] * 0.01667 * 3;
+    models[2].y += velocity_vector[1] * 0.01667 * 3;
+    models[2].z += velocity_vector[2] * 0.01667 * 3;
   }
+
+  SDL_JoystickClose(gGameController);
+  gGameController = NULL;
+
+  //Destroy window
+  SDL_DestroyWindow(window);
+  window = NULL;
 }
diff --git a/textures/slippy.png b/textures/slippy.png
index 2162f27..1b02f28 100644
Binary files a/textures/slippy.png and b/textures/slippy.png differ
diff --git a/writepng.c b/writepng.c
index 4a669c3..8977dcd 100644
--- a/writepng.c
+++ b/writepng.c
@@ -119,7 +119,7 @@ GLuint png_texture_load(const char * file_name, int * width, int * height)
 
   glGenTextures(1, &texture);
   glBindTexture(GL_TEXTURE_2D, texture);
-  glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, temp_width, temp_height, 0, GL_RGB, GL_UNSIGNED_BYTE, image_data);
+  glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, temp_width, temp_height, 0, GL_RGBA, GL_UNSIGNED_BYTE, image_data);
   glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
   glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
 
